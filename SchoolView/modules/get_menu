import requests
from bs4 import BeautifulSoup
import re

# ==== ÏÉÅÏàò Ï†ïÏùò ====
BASE_URL = "https://www.goeyi.kr"
MENU_PAGE_URL = f"{BASE_URL}/e-hyun-m/ad/fm/foodmenu/selectFoodMenuView.do"
DETAIL_API_URL = f"{BASE_URL}/e-hyun-m/ad/fm/foodmenu/selectFoodData.do"
SCHOOL_MENU_CODE = "2901"

HEADERS = {
    "accept": "*/*",
    "accept-encoding": "gzip, deflate, br, zstd",
    "accept-language": "ko,en-US;q=0.9,en;q=0.8,ja;q=0.7",
    "connection": "keep-alive",
    "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
    "host": "www.goeyi.kr",
    "origin": BASE_URL,
    "referer": f"{MENU_PAGE_URL}?mi={SCHOOL_MENU_CODE}",
    "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36",
    "x-requested-with": "XMLHttpRequest"
}

ALLERGY_DICT = {
    "1": "ÎÇúÎ•ò", "2": "Ïö∞Ïú†", "3": "Î©îÎ∞Ä", "4": "ÎïÖÏΩ©", "5": "ÎåÄÎëê", "6": "Î∞Ä", "7": "Í≥†Îì±Ïñ¥",
    "8": "Í≤å", "9": "ÏÉàÏö∞", "10": "ÎèºÏßÄÍ≥†Í∏∞", "11": "Î≥µÏà≠ÏïÑ", "12": "ÌÜ†ÎßàÌÜ†", "13": "ÏïÑÌô©ÏÇ∞Î•ò",
    "14": "Ìò∏Îëê", "15": "Îã≠Í≥†Í∏∞", "16": "Ïá†Í≥†Í∏∞", "17": "Ïò§ÏßïÏñ¥", "18": "Ï°∞Í∞úÎ•ò", "19": "Ïû£"
}

DAY_LIST = ["Ïùº", "Ïõî", "Ìôî", "Ïàò", "Î™©", "Í∏à", "ÌÜ†"]


def fetch_meal_data(fmseq: str):
    response = requests.post(DETAIL_API_URL, headers=HEADERS, data={"fmSeq": fmseq})
    response.raise_for_status()
    return response.json()


def get_fmseq_list_from_html(school_code=SCHOOL_MENU_CODE):
    url = f"{MENU_PAGE_URL}?mi={school_code}"
    res = requests.get(url, headers=HEADERS)
    res.raise_for_status()
    soup = BeautifulSoup(res.text, "html.parser")

    thead_ths = soup.select("table thead tr th")[1:]
    date_map = []
    for th in thead_ths:
        parts = th.get_text(separator=" ").strip().split()
        date_map.append((parts[0], parts[1]) if len(parts) >= 2 else (None, None))

    lunch_row = next((tr for tr in soup.select("table tbody tr")
                      if tr.find("th", {"scope": "row"}) and "Ï§ëÏãù" in tr.text), None)
    if lunch_row is None:
        return []

    tds = lunch_row.find_all("td")
    fmseq_list = []

    for i, td in enumerate(tds):
        day, date = date_map[i] if i < len(date_map) else (None, None)
        a_tag = td.find("a", onclick=True)
        fmSeq = None
        if a_tag:
            match = re.search(r"fn_layer_pop_trigger2\(.*?'(\d+)'\)", a_tag["onclick"])
            fmSeq = match.group(1) if match else None
        fmseq_list.append({"day": day, "date": date, "fmSeq": fmSeq})

    return fmseq_list


def get_menu(day: str):
    if day not in DAY_LIST:
        raise ValueError(f"ÏöîÏùºÏùÄ {DAY_LIST} Ï§ë ÌïòÎÇòÏó¨Ïïº Ìï©ÎãàÎã§.")

    fmseq_list = get_fmseq_list_from_html()
    data = fmseq_list[DAY_LIST.index(day)]

    if data["fmSeq"] is None:
        return {"menu": [], "allergy": [], "date": data["date"], "day": data["day"]}

    result = fetch_meal_data(data["fmSeq"])
    lines = result["fmCn"].strip().split("\n")

    menu_list = []
    allergy_by_menu = []
    total_allergies = set()

    for line in lines:
        line = line.strip()
        if not line:
            continue

        # Ï§Ñ Ï†ÑÏ≤¥Í∞Ä ÏïåÎü¨ÏßÄ Î≤àÌò∏ÎßåÏúºÎ°ú Ïù¥Î£®Ïñ¥ÏßÑ Í≤ΩÏö∞ (Ïòà: "1.2.3.")
        if re.fullmatch(r"^\d+(?:\.\d+)*\.?$", line):
            current_allergies = line.strip(".").split(".")
            current_allergies = [a for a in current_allergies if a]  # Îπà Î¨∏ÏûêÏó¥ Ï†úÍ±∞
            if menu_list and allergy_by_menu:
                allergy_by_menu[-1].extend(current_allergies)
            total_allergies.update(current_allergies)
            continue

        # Î©îÎâ¥ Î™Ö Îí§Ïóê ÏïåÎü¨ÏßÄ Î≤àÌò∏Í∞Ä Î∂ôÏùÄ Í≤ΩÏö∞Î•º Îçî Ï†ïÌôïÌïòÍ≤å Î∂ÑÎ¶¨
        # Ìå®ÌÑ¥: Î©îÎâ¥Î™Ö + Ïà´Ïûê.Ïà´Ïûê.Ïà´Ïûê... ÌòïÌÉú
        match = re.match(r"^(.*?)(\d+(?:\.\d+)*\.?)$", line)
        if match:
            menu_name = match.group(1).strip()
            allergy_str = match.group(2).strip(".")
            
            # Î©îÎâ¥Î™ÖÏù¥ ÎπÑÏñ¥ÏûàÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ÏóêÎßå Ï≤òÎ¶¨
            if menu_name:
                allergy_nums = allergy_str.split(".") if allergy_str else []
                allergy_nums = [a for a in allergy_nums if a]  # Îπà Î¨∏ÏûêÏó¥ Ï†úÍ±∞
                
                menu_list.append(menu_name)
                allergy_by_menu.append(allergy_nums)
                total_allergies.update(allergy_nums)
                continue

        # Î©îÎâ¥Î™ÖÎßå ÏûàÎäî Í≤ΩÏö∞ (ÏïåÎü¨ÏßÄ Î≤àÌò∏ ÏóÜÏùå)
        menu_list.append(line)
        allergy_by_menu.append([])

    # ÏïåÎü¨ÏßÄ Î≤àÌò∏Î•º Ïà´Ïûê ÏàúÏÑúÎ°ú Ï†ïÎ†¨
    allergy_numbers = sorted([a for a in total_allergies if a], key=lambda x: int(x) if x.isdigit() else 0)
    allergy_names = [ALLERGY_DICT[n] for n in allergy_numbers if n in ALLERGY_DICT]

    return {
        "menu": menu_list,
        "allergy": allergy_numbers,
        "allergy_names": allergy_names,
        "date": data["date"],
        "day": data["day"]
    }


if __name__ == "__main__":
    day_input = input("Í∏âÏãùÏ†ïÎ≥¥ ÌÅ¨Î°§ÎßÅ\nÏõêÌïòÎäî ÏöîÏùºÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî (Ïòà: Ïõî): ").strip()
    result = get_menu(day_input)
    
    print(f"\nüìÖ {result['day']}ÏöîÏùº ({result['date']}) Ï§ëÏãù Î©îÎâ¥")
    print("=" * 40)
    
    if result['menu']:
        print("üçΩÔ∏è Î©îÎâ¥:")
        for i, menu in enumerate(result['menu']):
            print(f"  {i+1}. {menu}")
        
        print(f"\n‚ö†Ô∏è ÏïåÎü¨ÏßÄ Ï†ïÎ≥¥:")
        if result['allergy_names']:
            print(f"  Ìè¨Ìï® ÏïåÎü¨ÏßÄ: {', '.join(result['allergy_names'])}")
            print(f"  ÏïåÎü¨ÏßÄ Î≤àÌò∏: {', '.join(result['allergy'])}")
        else:
            print("  ÏïåÎü¨ÏßÄ Ï†ïÎ≥¥ ÏóÜÏùå")
    else:
        print("Í∏âÏãù Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§.")
    
    print(f"\nüìä Ï†ÑÏ≤¥ Í≤∞Í≥º: {result}")
